{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","pickColor","setState","colorCell","color","state","className","style","backgroundColor","this","onClick","React","Component","renderCols","numCol","newColor","colsArr","i","console","log","push","TableRow","cols","renderRows","numRows","numCols","rowArr","Table","App","addRow","exisitingRows","removeRow","existingRows","addCol","exisitingCols","removeCol","existingCols","currColor","id","type","name","onChange","event","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fac4d11.chunk.js","sourcesContent":["import React from 'react'\r\nexport default class TableCell extends React.Component {\r\n    constructor(props) {\r\n\r\n        super(props); \r\n\r\n            this.state = {\r\n                colorCell: \"\"\r\n            };\r\n        }\r\n\r\n        pickColor = () => {\r\n\r\n            this.setState({\r\n                colorCell: this.props.color\r\n            });\r\n        }\r\n\r\n        render() {\r\n\r\n            return (\r\n                <td className = 'cell'\r\n                style={{backgroundColor: this.state.colorCell}}\r\n                onClick={this.pickColor}/>\r\n            )\r\n        }\r\n    }","import React from 'react'\r\nimport TableCell from './TableCell'\r\n\r\nfunction renderCols (numCol, newColor) {\r\n\r\n    let colsArr = []\r\n\r\n    for(let i=0; i < numCol; i++) {\r\n\r\n        console.log(\"column added\")\r\n\r\n        colsArr.push(<TableCell color={newColor}/>)\r\n\r\n    }\r\n    return colsArr;\r\n}\r\n\r\nfunction TableRow(props) {\r\n\r\n    let newColor = props.color;\r\n\r\n    return (\r\n\r\n        <tr className=\"row\">\r\n\r\n            {renderCols(props.cols, newColor)}\r\n            \r\n        </tr>\r\n    ) \r\n}\r\n\r\nexport default TableRow;","import React from 'react'\r\nimport TableRow from './TableRow';\r\n\r\nfunction renderRows (numRows, numCols, newColor) {\r\n\r\n    let rowArr = [] //arr of rows\r\n\r\n    for(let i = 0; i < numRows; i++) {\r\n\r\n        rowArr.push(<TableRow cols={numCols} color={newColor}/>)\r\n    }\r\n    return rowArr;\r\n}\r\n\r\nfunction Table(props) {\r\n\r\n    let numRows = props.numRows;\r\n\r\n    let numCols = props.numCols;\r\n\r\n    let newColor = props.color;\r\n\r\n    return (\r\n\r\n        <table className=\"table\">\r\n\r\n            {renderRows(numRows, numCols, newColor)}\r\n            \r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './components/Table';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      numRows: 2,\n      numCols: 2,\n      currColor: ''\n      // default\n    }\n  }\n\n  addRow = () => {\n    // fcn to update the rows\n    let exisitingRows = this.state.numRows;\n    this.setState({\n      numRows: exisitingRows + 1\n    })\n  }\n\n  removeRow = () => {\n    let existingRows=this.state.numRows;\n    this.setState({\n      numRows:existingRows-1\n    })\n  }\n\n  addCol = () => {\n    let exisitingCols = this.state.numCols;\n    this.setState({\n      numCols: exisitingCols + 1\n    })\n  }\n\n  removeCol = () => {\n    let existingCols=this.state.numCols;\n    this.setState({\n      numCols:existingCols-1\n    })\n  }\n \n\n  render() {  \n    return (\n\n      <div className=\"App\">\n        {/* This class name gets updated in css file */}\n\n        <h1>Update States using React JS</h1>\n        {/* header */}\n\n        <div className=\"buttons\">\n          {/* adding and removing rows and cols */}\n\n        <button id=\"addRow\" type=\"button\" onClick={() => this.addRow()}>Add Row</button>\n\n        <button id=\"removeRow\" type=\"button\" onClick={()=>this.removeRow()}>Remove Row</button>\n\n        <button id=\"addColumn\" type=\"button\" onClick={() => this.addCol()}>Add Column</button>\n\n        <button id=\"removeColumn\" type=\"button\" onClick={()=>this.removeCol()}>Remove Column</button>\n        \n        </div>\n        {/* end of add and remove */}\n        <br/>\n        {/* space */}\n        <div id=\"chooseColor\">\n\n          <p>Choose your color!</p>\n\n          <select name=\"colors\" id=\"colors\" onChange={(event) => {\n            this.setState({\n              color: event.target.value\n            })\n          }}>\n\n            <option value=\"white\">White</option>\n            {/* WEIRD BUG: default color d/n change unless you change color first, white being default can mask this! */}\n            <option value=\"red\">Red</option>\n            <option value=\"orange\">Orange</option>\n            <option value=\"yellow\">Yellow</option>\n            <option value=\"blue\">Blue</option>\n            <option value=\"indigo\">Indigo</option>\n            <option value=\"violet\">Violet</option>\n            <option value=\"green\">Green</option>\n\n          </select>\n          {/* end of colors */}\n        </div>\n        {/* end of color selection */}\n        <br/>\n        {/* space */}\n        \n        <Table className=\"theTable\" \n        numCols = {this.state.numCols} \n        numRows = {this.state.numRows}\n        color = {this.state.color}\n        ></Table>\n        {/* changing table colors */}\n      </div>\n      // end of app\n    );\n    // end of return\n  } \n// end of render\n}\n// end of class\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}